
.videos-grid{
  display : grid;
  grid-template-columns: 1fr 1fr 1fr;
  column-gap: 16px;
  row-gap: 25px;
  position: relative;
  top: 14px;
}

@media (max-width: 830px) {
  .videos-grid{
    grid-template-columns: 1fr 1fr;
  }
}

@media (min-width: 1250px) {
  .videos-grid{
    grid-template-columns: 1fr 1fr 1fr 1fr;
  }
}

.p{
  font-family: "Roboto", Arial;
  margin-top: 0;
  margin-bottom: 0;
}

.thumbnail-row{
  position: relative;
}

.Thumbnail_1{
  width: 100%;
  border-radius:4px;
  margin-bottom : 12px;
}
.Thumbnail_1:hover{
  cursor:pointer;
}

.info-video{
  display: grid;
  grid-template-columns : 50px 1fr;
}
.video-title{
  font-family: "Roboto", sans-serif;
  font-size: 14px;
  font-weight: bold;
  line-height: 20px;
  margin-top: 0;
  margin-bottom: 15px;
}

.profile-pic{
  vertical-align: top;
  margin-right: 5px;
}
.profile-pic:hover{
  cursor:pointer;
}

.text-content{
  margin-left : 5px;
}
.text-content:hover{
  cursor:pointer;
}

.video-profile-pic{
  width:40px;
  height: 40px;
  border-radius : 30px;
}

.video-info{
  font-family: "Roboto", sans-serif;
  font-size: 12px;
  color:rgb(96, 96, 96);
  margin-bottom: 4px;
}
.video-stats{
  font-family: "Roboto", sans-serif;
  font-size: 12px;
  color: rgb(96, 96, 96);
  margin-top: 4px;
}

.video-time{
  background-color: rgb(29, 29, 29);
  font-family: Roboto, Arial;
  font-weight: 550;
  padding: 5px 5px 5px 5px;
  border-radius: 4px;
  color: white;
  position : absolute;
  bottom: 25px;
  right: 10px;
}

body{
  padding-top: 83px;
  background-color: rgb(230, 230, 230);
}

/*NOTE:*/
/* Display: block element=an element which takes up the whole line wheher the content covers it or not 
   inline-block: they take up space as much needed an no more
   inline elements= they exist inside the text/element
   a text element is a block by default*/
  /* A grid is something which can be created in order to create a sort of box and is similar to 
  a inline-block/block elements, but is more effective*/
  /* FR tells the webpage to tke up  all the available horizontal space */
  /* in case of 2 or more FRs, the values beside FR take up space in ratio form*/
  /* Flexbox is similar to a css grid, but more flexible because it only takes space as needed
    * U can change the order of the elements*/
  /*flex: 1 is equalent to 1fr in grid */
  /* flex-directions = grid-templates = 'to align horizontally /vertically
      justify-content = alignment horizontaly in the flexbox
      align-items = alignment vertically in thse flexbox*/ 
  /* a border can be applied to only one side by adding the dirn
      at the middle(border-bottom-width)*/

  /* always use negative values to  psition smtg in an opp direction*/

  /* can add a element with space next to the .classname selector
     to target the specific type of element inside the class*/

  /* media queries (@media) is an element which activates only when
     the page hits a certain width/size.
     ex: to make 2 vids per row in yt after we decrease the width
  */

  /*shorthand properties/shortcuts:
    padding-left,right,bottom,top -> padding(for all sides
    padding: (we can set 4 values at one place)
    padding : top right bottom left(clockwise)
    padding : vertical horizontal

    similarly
    margin : (clockwise)

    border-width,style,color -> border:(all sides)
    border : width style color

    inheritence: the element properties get passed down to all the 
                 containers etc. under it (but not all elements)
                 it mostly works on text properties(font family, size etc.)

   semantic elements: (it is basically div, but have meanings to screen readers and search engines)
   (screen readers : reading codes;)
     <main>
     <header>
     <nav> 
     <section>             